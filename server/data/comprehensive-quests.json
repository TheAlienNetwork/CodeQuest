[
  {
    "id": 1,
    "title": "üè∞ The Village Awakening",
    "description": "Welcome, brave hero! Your adventure begins in a sleepy village. Send your first message to the world by printing 'Hello, Adventure!' to wake up the village.",
    "difficulty": "beginner",
    "xpReward": 50,
    "estimatedTime": "3 min",
    "startingCode": "# Welcome to the mystical land of CodeQuest!\n# The village sleeps... wake them up with your first spell!\n# Print 'Hello, Adventure!' to begin your journey\n\n",
    "solutionCode": "print('Hello, Adventure!')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Hello, Adventure!"
      }
    ],
    "concepts": ["print", "strings", "basic syntax", "console output"],
    "requiredLevel": 1
  },
  {
    "id": 2,
    "title": "üìú The Hero Registration",
    "description": "The village elder needs to register you as a new hero! Create magical containers (variables) to store your hero name, level, and chosen class.",
    "difficulty": "beginner",
    "xpReward": 75,
    "estimatedTime": "5 min",
    "startingCode": "# The village elder prepares your hero scroll!\n# Create a variable 'hero_name' with your hero's name\n# Create a variable 'level' with the number 1\n# Create a variable 'hero_class' with your chosen class\n# Print all three to complete your registration\n\n",
    "solutionCode": "hero_name = 'Brave Knight'\nlevel = 1\nhero_class = 'Warrior'\nprint(hero_name)\nprint(level)\nprint(hero_class)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Brave Knight\n1\nWarrior"
      }
    ],
    "concepts": ["variables", "strings", "integers", "variable assignment", "data types"],
    "requiredLevel": 1
  },
  {
    "id": 3,
    "title": "‚ö° The Power Crystal Chamber",
    "description": "Deep in the crystal caves, you find power crystals! Calculate your total magical power by combining physical strength with mystical energy.",
    "difficulty": "beginner",
    "xpReward": 100,
    "estimatedTime": "6 min",
    "startingCode": "# The crystals glow with ancient power!\n# Create a strength crystal with value 15\n# Create a magic crystal with value 8.5 (use decimal)\n# Combine their powers and print your total magic power\n\n",
    "solutionCode": "strength_crystal = 15\nmagic_crystal = 8.5\ntotal_power = strength_crystal + magic_crystal\nprint(total_power)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "23.5"
      }
    ],
    "concepts": ["variables", "integers", "floats", "arithmetic", "mathematical operations"],
    "requiredLevel": 1
  },
  {
    "id": 4,
    "title": "üßô‚Äç‚ôÇÔ∏è The Wise Gatekeeper",
    "description": "A mystical gatekeeper blocks your path and tests your wisdom! Answer differently based on your hero level to prove you're worthy.",
    "difficulty": "beginner",
    "xpReward": 125,
    "estimatedTime": "8 min",
    "startingCode": "# The gatekeeper's eyes glow with ancient knowledge\nhero_level = 1\n\n# If hero_level equals 1, print 'I seek wisdom and adventure'\n# Otherwise, print 'I am a seasoned hero seeking greater challenges'\n\n",
    "solutionCode": "hero_level = 1\n\nif hero_level == 1:\n    print('I seek wisdom and adventure')\nelse:\n    print('I am a seasoned hero seeking greater challenges')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "I seek wisdom and adventure"
      }
    ],
    "concepts": ["conditionals", "if statements", "comparison operators", "boolean logic"],
    "requiredLevel": 1
  },
  {
    "id": 5,
    "title": "üèüÔ∏è The Arena Training",
    "description": "Welcome to the training arena! Master the art of repetition by counting your training rounds. Show your dedication by completing 5 practice rounds.",
    "difficulty": "beginner",
    "xpReward": 150,
    "estimatedTime": "10 min",
    "startingCode": "# The arena master calls for training!\n# Count from 1 to 5 to show your dedication\n# Use a for loop with range(1, 6)\n# Print each training round number\n\n",
    "solutionCode": "for round_num in range(1, 6):\n    print(round_num)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "1\n2\n3\n4\n5"
      }
    ],
    "concepts": ["loops", "for loops", "range", "iteration", "counting"],
    "requiredLevel": 1
  },
  {
    "id": 6,
    "title": "üéØ The Archery Challenge",
    "description": "The village archery master challenges you to target practice! Ask for your name and number of arrows, then simulate each shot in the training grounds.",
    "difficulty": "beginner",
    "xpReward": 175,
    "estimatedTime": "12 min",
    "startingCode": "# The archery master prepares your challenge!\n# Ask for the archer's name using input()\n# Ask how many arrows they want to shoot\n# Use a loop to simulate shooting each arrow\n\n",
    "solutionCode": "archer_name = input('What is your name, archer? ')\narrow_count = int(input('How many arrows do you want to shoot? '))\n\nfor shot in range(1, arrow_count + 1):\n    print(f'{archer_name} shoots arrow {shot}!')\n\nprint('Excellent shooting!')",
    "testCases": [
      {
        "input": "Robin\n3",
        "expectedOutput": "What is your name, archer? How many arrows do you want to shoot? Robin shoots arrow 1!\nRobin shoots arrow 2!\nRobin shoots arrow 3!\nExcellent shooting!"
      }
    ],
    "concepts": ["input", "type conversion", "user interaction", "for loops", "string interpolation"],
    "requiredLevel": 2
  },
  {
    "id": 7,
    "title": "üåü The Star Pattern Forge",
    "description": "In the magical forge, create star patterns for enchanted armor! Use loops to craft a pyramid pattern that grows stronger with each level.",
    "difficulty": "beginner",
    "xpReward": 200,
    "estimatedTime": "15 min",
    "startingCode": "# The forge master needs star patterns for enchanted armor!\n# Create a pyramid pattern with 5 levels\n# Each level should have that many stars\n# Level 1: *, Level 2: **, Level 3: ***, etc.\n\n",
    "solutionCode": "for level in range(1, 6):\n    print('*' * level)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "*\n**\n***\n****\n*****"
      }
    ],
    "concepts": ["loops", "string multiplication", "patterns", "for loops", "range"],
    "requiredLevel": 2
  },
  {
    "id": 8,
    "title": "üîç The Word Detective",
    "description": "A mysterious scroll contains palindromic magic words! Help the village librarian identify which words read the same forwards and backwards.",
    "difficulty": "beginner",
    "xpReward": 175,
    "estimatedTime": "12 min",
    "startingCode": "# The ancient scroll contains these mysterious words\nmagic_words = ['racecar', 'sword', 'level', 'dragon', 'madam']\n\n# Check each word to see if it's a palindrome\n# Print 'word: Magical' if it's a palindrome, 'word: Normal' if not\n\n",
    "solutionCode": "magic_words = ['racecar', 'sword', 'level', 'dragon', 'madam']\n\nfor word in magic_words:\n    if word == word[::-1]:\n        print(f'{word}: Magical')\n    else:\n        print(f'{word}: Normal')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "racecar: Magical\nsword: Normal\nlevel: Magical\ndragon: Normal\nmadam: Magical"
      }
    ],
    "concepts": ["strings", "slicing", "conditionals", "string reversal", "for loops"],
    "requiredLevel": 2
  },
  {
    "id": 9,
    "title": "‚öîÔ∏è The Weapon Arsenal",
    "description": "Every hero needs a mighty weapon collection! Create your arsenal and display each weapon to strike fear into your enemies.",
    "difficulty": "beginner", 
    "xpReward": 175,
    "estimatedTime": "12 min",
    "startingCode": "# Forge your legendary weapon collection!\n# Create a list called 'weapons' with: 'Dragonblade', 'Elvish Bow', 'Staff of Power'\n# Display each weapon in your arsenal using a loop\n\n",
    "solutionCode": "weapons = ['Dragonblade', 'Elvish Bow', 'Staff of Power']\n\nfor weapon in weapons:\n    print(weapon)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Dragonblade\nElvish Bow\nStaff of Power"
      }
    ],
    "concepts": ["lists", "for loops", "iteration", "list creation", "data structures"],
    "requiredLevel": 2
  },
  {
    "id": 10,
    "title": "üõ°Ô∏è The Protection Spell",
    "description": "Master your first spell! Create a reusable protection function that shields you from danger. True wizards never repeat their incantations!",
    "difficulty": "intermediate",
    "xpReward": 225,
    "estimatedTime": "15 min",
    "startingCode": "# Learn your first spell, young mage!\n# Create a function called 'cast_protection'\n# It should print 'Shield of light surrounds you!'\n# Then call the function to activate the spell\n\n",
    "solutionCode": "def cast_protection():\n    print('Shield of light surrounds you!')\n\ncast_protection()",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Shield of light surrounds you!"
      }
    ],
    "concepts": ["functions", "function definition", "function calls", "code reusability"],
    "requiredLevel": 3
  },
  {
    "id": 11,
    "title": "‚öîÔ∏è The Battle Calculator",
    "description": "Create a magical battle calculator! Pass attack power to a function and return double damage for critical hits.",
    "difficulty": "intermediate",
    "xpReward": 250,
    "estimatedTime": "18 min",
    "startingCode": "# Create a function called 'calculate_damage'\n# It should take 'attack_power' as a parameter\n# Return attack_power * 2 (critical hit!)\n# Test it with attack_power = 10\n\n",
    "solutionCode": "def calculate_damage(attack_power):\n    return attack_power * 2\n\nresult = calculate_damage(10)\nprint(result)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "20"
      }
    ],
    "concepts": ["functions", "parameters", "return values", "function calls"],
    "requiredLevel": 3
  },
  {
    "id": 12,
    "title": "üåô The Night Watch",
    "description": "Guard the village through the night! Use a while loop to keep watch until dawn breaks at hour 6.",
    "difficulty": "intermediate",
    "xpReward": 275,
    "estimatedTime": "20 min",
    "startingCode": "# Create a night watch simulation\n# Start at hour 0 (midnight)\n# Use a while loop to count hours until dawn (6 AM)\n# Print each hour of your watch\n\n",
    "solutionCode": "hour = 0\nwhile hour < 6:\n    print(f'Hour {hour}: Standing watch...')\n    hour += 1\nprint('Dawn breaks! Watch is over.')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Hour 0: Standing watch...\nHour 1: Standing watch...\nHour 2: Standing watch...\nHour 3: Standing watch...\nHour 4: Standing watch...\nHour 5: Standing watch...\nDawn breaks! Watch is over."
      }
    ],
    "concepts": ["while loops", "counters", "incrementation", "loop conditions"],
    "requiredLevel": 3
  },
  {
    "id": 13,
    "title": "üóùÔ∏è The Character Profile",
    "description": "Create a character profile using a dictionary! Store your hero's vital information in a magical tome.",
    "difficulty": "intermediate",
    "xpReward": 300,
    "estimatedTime": "18 min",
    "startingCode": "# Create a dictionary with your character's stats\n# Include: name, class, level, health, mana\n# Print each stat in a readable format\n\n",
    "solutionCode": "character = {\n    'name': 'Hero',\n    'class': 'Warrior',\n    'level': 5,\n    'health': 100,\n    'mana': 50\n}\n\nfor key, value in character.items():\n    print(f'{key}: {value}')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "name: Hero\nclass: Warrior\nlevel: 5\nhealth: 100\nmana: 50"
      }
    ],
    "concepts": ["dictionaries", "key-value pairs", "dictionary creation", "dictionary iteration"],
    "requiredLevel": 3
  },
  {
    "id": 14,
    "title": "üé≤ The Dice of Fate",
    "description": "Create a function to roll magical dice! Use the random module to determine your fate in battle.",
    "difficulty": "intermediate",
    "xpReward": 325,
    "estimatedTime": "20 min",
    "startingCode": "# Create a function called roll_dice that takes number of sides\n# Import random module\n# Return a random number between 1 and the number of sides\n# Roll a 6-sided dice 3 times and print results\n\n",
    "solutionCode": "import random\n\ndef roll_dice(sides):\n    return random.randint(1, sides)\n\nfor i in range(3):\n    result = roll_dice(6)\n    print(f'Roll {i+1}: {result}')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Roll 1: 3\nRoll 2: 6\nRoll 3: 2"
      }
    ],
    "concepts": ["functions", "parameters", "return values", "random module", "imports"],
    "requiredLevel": 3
  },
  {
    "id": 15,
    "title": "üè∞ The Castle Builder",
    "description": "Build a mighty fortress using nested loops! Create a castle wall pattern with stone blocks.",
    "difficulty": "intermediate",
    "xpReward": 350,
    "estimatedTime": "25 min",
    "startingCode": "# Build a castle wall using nested loops\n# Create a 5x5 pattern using '#' characters\n# Each row should have 5 '#' characters\n\n",
    "solutionCode": "for row in range(5):\n    for col in range(5):\n        print('#', end=' ')\n    print()  # New line after each row",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "# # # # # \n# # # # # \n# # # # # \n# # # # # \n# # # # # "
      }
    ],
    "concepts": ["nested loops", "print formatting", "patterns", "end parameter"],
    "requiredLevel": 4
  },
  {
    "id": 16,
    "title": "üßô‚Äç‚ôÇÔ∏è The Wizard Class",
    "description": "Create a powerful Wizard class with magical abilities! Learn the ancient art of object-oriented magic.",
    "difficulty": "intermediate",
    "xpReward": 400,
    "estimatedTime": "30 min",
    "startingCode": "# Create a Wizard class\n# Add __init__ method with name and mana\n# Add cast_spell method that reduces mana by 10\n# Create a wizard and cast 3 spells\n\n",
    "solutionCode": "class Wizard:\n    def __init__(self, name, mana):\n        self.name = name\n        self.mana = mana\n    \n    def cast_spell(self, spell_name):\n        if self.mana >= 10:\n            self.mana -= 10\n            print(f'{self.name} casts {spell_name}! Mana: {self.mana}')\n        else:\n            print(f'{self.name} is out of mana!')\n\nwizard = Wizard('Gandalf', 50)\nwizard.cast_spell('Fireball')\nwizard.cast_spell('Lightning')\nwizard.cast_spell('Heal')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Gandalf casts Fireball! Mana: 40\nGandalf casts Lightning! Mana: 30\nGandalf casts Heal! Mana: 20"
      }
    ],
    "concepts": ["classes", "objects", "__init__", "methods", "self", "object-oriented programming"],
    "requiredLevel": 5
  },
  {
    "id": 17,
    "title": "üó°Ô∏è The Arena Battle",
    "description": "Create an epic battle system! Two fighters clash in the arena until one emerges victorious.",
    "difficulty": "advanced",
    "xpReward": 500,
    "estimatedTime": "35 min",
    "startingCode": "# Create a battle system\n# Two fighters with health and attack power\n# They take turns attacking until one reaches 0 health\n# Print the battle progress\n\n",
    "solutionCode": "class Fighter:\n    def __init__(self, name, health, attack):\n        self.name = name\n        self.health = health\n        self.attack = attack\n    \n    def attack_enemy(self, enemy):\n        enemy.health -= self.attack\n        print(f'{self.name} attacks {enemy.name} for {self.attack} damage!')\n        print(f'{enemy.name} health: {enemy.health}')\n\nfighter1 = Fighter('Hero', 100, 25)\nfighter2 = Fighter('Goblin', 80, 20)\n\nwhile fighter1.health > 0 and fighter2.health > 0:\n    fighter1.attack_enemy(fighter2)\n    if fighter2.health <= 0:\n        print(f'{fighter1.name} wins!')\n        break\n    fighter2.attack_enemy(fighter1)\n    if fighter1.health <= 0:\n        print(f'{fighter2.name} wins!')\n        break",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Hero attacks Goblin for 25 damage!\nGoblin health: 55\nGoblin attacks Hero for 20 damage!\nHero health: 80\nHero attacks Goblin for 25 damage!\nGoblin health: 30\nGoblin attacks Hero for 20 damage!\nHero health: 60\nHero attacks Goblin for 25 damage!\nGoblin health: 5\nGoblin attacks Hero for 20 damage!\nHero health: 40\nHero attacks Goblin for 25 damage!\nGoblin health: -20\nHero wins!"
      }
    ],
    "concepts": ["classes", "while loops", "game logic", "conditional statements", "object interaction"],
    "requiredLevel": 6
  },
  {
    "id": 18,
    "title": "üõ°Ô∏è The Error Guardian",
    "description": "Handle errors like a true guardian! Protect your code from crashing with try-except blocks.",
    "difficulty": "advanced",
    "xpReward": 550,
    "estimatedTime": "25 min",
    "startingCode": "# Create a safe division function\n# Handle division by zero errors\n# Ask user for two numbers and divide them safely\n# Keep asking until they enter 'quit'\n\n",
    "solutionCode": "def safe_divide(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        print('Error: Cannot divide by zero!')\n        return None\n    except ValueError:\n        print('Error: Please enter valid numbers!')\n        return None\n\nwhile True:\n    try:\n        num1 = input('Enter first number (or quit): ')\n        if num1.lower() == 'quit':\n            break\n        num2 = input('Enter second number: ')\n        \n        num1 = float(num1)\n        num2 = float(num2)\n        \n        result = safe_divide(num1, num2)\n        if result is not None:\n            print(f'Result: {result}')\n    except ValueError:\n        print('Please enter valid numbers!')",
    "testCases": [
      {
        "input": "10\n2\nquit",
        "expectedOutput": "Enter first number (or quit): Enter second number: Result: 5.0\nEnter first number (or quit): "
      }
    ],
    "concepts": ["try-except", "error handling", "exceptions", "input validation", "while loops"],
    "requiredLevel": 7
  },
  {
    "id": 19,
    "title": "üé® The List Comprehension Master",
    "description": "Master the ancient art of list comprehensions! Create powerful data transformations with elegant Python magic.",
    "difficulty": "advanced",
    "xpReward": 600,
    "estimatedTime": "30 min",
    "startingCode": "# Create list comprehensions to:\n# 1. Generate squares of numbers 1-10\n# 2. Filter even numbers from 1-20\n# 3. Create a list of character names with their lengths\n\n",
    "solutionCode": "# Generate squares of numbers 1-10\nsquares = [x**2 for x in range(1, 11)]\nprint('Squares:', squares)\n\n# Filter even numbers from 1-20\nevens = [x for x in range(1, 21) if x % 2 == 0]\nprint('Even numbers:', evens)\n\n# Create list of character names with their lengths\nnames = ['Hero', 'Wizard', 'Archer', 'Warrior']\nname_lengths = [f'{name}: {len(name)}' for name in names]\nprint('Name lengths:', name_lengths)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Squares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nEven numbers: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nName lengths: ['Hero: 4', 'Wizard: 6', 'Archer: 6', 'Warrior: 7']"
      }
    ],
    "concepts": ["list comprehensions", "filtering", "mapping", "conditional expressions"],
    "requiredLevel": 8
  },
  {
    "id": 20,
    "title": "‚ú® The Decorator Sage",
    "description": "Learn the ultimate art of decorators! Enhance your functions with magical wrapper spells that add timing abilities.",
    "difficulty": "expert",
    "xpReward": 700,
    "estimatedTime": "40 min",
    "startingCode": "# Create a timing decorator\n# Measure how long functions take to execute\n# Apply it to a function that calculates fibonacci numbers\n\n",
    "solutionCode": "import time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f'{func.__name__} took {end_time - start_time:.4f} seconds')\n        return result\n    return wrapper\n\n@timing_decorator\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nresult = fibonacci(10)\nprint(f'Fibonacci(10) = {result}')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "fibonacci took 0.0001 seconds\nFibonacci(10) = 55"
      }
    ],
    "concepts": ["decorators", "function wrapping", "higher-order functions", "recursion", "timing"],
    "requiredLevel": 10
  }
]