[
  {
    "id": 1,
    "title": "üöÄ Welcome to Python",
    "description": "Your first quest begins! Print 'Hello, World!' to the console to start your coding adventure.",
    "difficulty": "beginner",
    "xpReward": 50,
    "estimatedTime": "2 min",
    "startingCode": "# Welcome to CodeQuest, brave adventurer!\n# Your first quest: Print 'Hello, World!' to the console\n\n",
    "solutionCode": "print('Hello, World!')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Hello, World!"
      }
    ],
    "concepts": ["print", "strings", "basic syntax", "console output"],
    "requiredLevel": 1
  },
  {
    "id": 2,
    "title": "üéí The Magic Backpack",
    "description": "Every adventurer needs a backpack! Create variables to store your name, age, and favorite weapon.",
    "difficulty": "beginner",
    "xpReward": 75,
    "estimatedTime": "5 min",
    "startingCode": "# Create your adventurer's profile\n# Store your name in a variable called 'name'\n# Store your age in a variable called 'age'\n# Store your favorite weapon in a variable called 'weapon'\n# Print all three variables\n\n",
    "solutionCode": "name = 'Hero'\nage = 25\nweapon = 'Sword'\nprint(name)\nprint(age)\nprint(weapon)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Hero\n25\nSword"
      }
    ],
    "concepts": ["variables", "strings", "integers", "variable assignment", "data types"],
    "requiredLevel": 1
  },
  {
    "id": 3,
    "title": "üßÆ The Number Oracle",
    "description": "The oracle speaks in numbers! Create variables for different number types and calculate your total power.",
    "difficulty": "beginner",
    "xpReward": 100,
    "estimatedTime": "6 min",
    "startingCode": "# The oracle reveals your stats\n# Create an integer variable 'strength' with value 10\n# Create a float variable 'magic_power' with value 7.5\n# Calculate your total power by adding them together\n# Print the result\n\n",
    "solutionCode": "strength = 10\nmagic_power = 7.5\ntotal_power = strength + magic_power\nprint(total_power)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "17.5"
      }
    ],
    "concepts": ["variables", "integers", "floats", "arithmetic", "mathematical operations", "type conversion"],
    "requiredLevel": 1
  },
  {
    "id": 4,
    "title": "üé≠ The Storyteller's Choice",
    "description": "You meet a storyteller who asks about your quest. Use an if statement to respond based on your level.",
    "difficulty": "beginner",
    "xpReward": 125,
    "estimatedTime": "8 min",
    "startingCode": "# The storyteller wants to know about your quest\nlevel = 1\n\n# If level is 1, print 'I am just starting my journey'\n# Otherwise, print 'I am an experienced adventurer'\n\n",
    "solutionCode": "level = 1\n\nif level == 1:\n    print('I am just starting my journey')\nelse:\n    print('I am an experienced adventurer')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "I am just starting my journey"
      }
    ],
    "concepts": ["conditionals", "if statements", "comparison operators", "boolean logic", "control flow"],
    "requiredLevel": 1
  },
  {
    "id": 5,
    "title": "üèÉ The Training Grounds",
    "description": "Train your skills by counting! Use a for loop to count from 1 to 5.",
    "difficulty": "beginner",
    "xpReward": 150,
    "estimatedTime": "10 min",
    "startingCode": "# Time to train! Count from 1 to 5\n# Use a for loop with range(1, 6)\n# Print each number\n\n",
    "solutionCode": "for i in range(1, 6):\n    print(i)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "1\n2\n3\n4\n5"
      }
    ],
    "concepts": ["loops", "for loops", "range", "iteration", "counting"],
    "requiredLevel": 2
  },
  {
    "id": 6,
    "title": "üó°Ô∏è The Weapon Master",
    "description": "Create a list of weapons and display your arsenal to intimidate enemies!",
    "difficulty": "beginner",
    "xpReward": 175,
    "estimatedTime": "12 min",
    "startingCode": "# Create your weapon collection\n# Make a list called 'weapons' with: 'Sword', 'Bow', 'Staff'\n# Print each weapon using a for loop\n\n",
    "solutionCode": "weapons = ['Sword', 'Bow', 'Staff']\nfor weapon in weapons:\n    print(weapon)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Sword\nBow\nStaff"
      }
    ],
    "concepts": ["lists", "for loops", "iteration", "list creation", "data structures"],
    "requiredLevel": 2
  },
  {
    "id": 7,
    "title": "üõ°Ô∏è The Shield Spell",
    "description": "Create a function that casts a protection spell. Functions are reusable magic!",
    "difficulty": "intermediate",
    "xpReward": 200,
    "estimatedTime": "15 min",
    "startingCode": "# Create a function called 'cast_shield'\n# It should print 'Protection spell activated!'\n# Then call the function\n\n",
    "solutionCode": "def cast_shield():\n    print('Protection spell activated!')\n\ncast_shield()",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Protection spell activated!"
      }
    ],
    "concepts": ["functions", "function definition", "function calls", "code reusability", "modular programming"],
    "requiredLevel": 3
  },
  {
    "id": 8,
    "title": "‚öîÔ∏è The Battle Calculator",
    "description": "Create a function that calculates battle damage. Pass in attack power and return the damage dealt.",
    "difficulty": "intermediate",
    "xpReward": 225,
    "estimatedTime": "18 min",
    "startingCode": "# Create a function called 'calculate_damage'\n# It should take 'attack_power' as a parameter\n# Return attack_power * 2 (critical hit!)\n# Test it with attack_power = 10\n\n",
    "solutionCode": "def calculate_damage(attack_power):\n    return attack_power * 2\n\nresult = calculate_damage(10)\nprint(result)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "20"
      }
    ],
    "concepts": ["functions", "parameters", "return values"],
    "requiredLevel": 3
  },
  {
    "id": 9,
    "title": "üé≤ The Dice of Fate",
    "description": "Create a while loop that rolls a dice until you get a 6. Use a counter to track attempts.",
    "difficulty": "intermediate",
    "xpReward": 250,
    "estimatedTime": "20 min",
    "startingCode": "# Simulate rolling a dice until you get 6\n# Use a counter and while loop\n# For this quest, use a simple counter that increments\n# Stop when counter reaches 3 and print the counter\n\n",
    "solutionCode": "counter = 0\nwhile counter < 3:\n    counter += 1\nprint(counter)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "3"
      }
    ],
    "concepts": ["while loops", "counters", "incrementation"],
    "requiredLevel": 3
  },
  {
    "id": 10,
    "title": "üè∞ The Castle Builder",
    "description": "Build a castle using nested loops! Create a 3x3 pattern using asterisks.",
    "difficulty": "intermediate",
    "xpReward": 275,
    "estimatedTime": "25 min",
    "startingCode": "# Build a 3x3 castle using nested loops\n# Use two for loops to print a 3x3 grid of asterisks\n# Each row should be on a new line\n\n",
    "solutionCode": "for i in range(3):\n    for j in range(3):\n        print('*', end='')\n    print()",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "***\n***\n***"
      }
    ],
    "concepts": ["nested loops", "for loops", "print formatting"],
    "requiredLevel": 4
  },
  {
    "id": 11,
    "title": "üè∫ The Treasure Dictionary",
    "description": "Create a dictionary to store your treasures and their values. Dictionaries are like magical chests!",
    "difficulty": "intermediate",
    "xpReward": 300,
    "estimatedTime": "20 min",
    "startingCode": "# Create a dictionary called 'treasures'\n# Add: 'gold': 100, 'gems': 50, 'artifacts': 25\n# Print the value of 'gold'\n\n",
    "solutionCode": "treasures = {'gold': 100, 'gems': 50, 'artifacts': 25}\nprint(treasures['gold'])",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "100"
      }
    ],
    "concepts": ["dictionaries", "key-value pairs", "dictionary access"],
    "requiredLevel": 4
  },
  {
    "id": 12,
    "title": "üßô The Spell Library",
    "description": "Create a list of spell dictionaries. Each spell has a name and power level.",
    "difficulty": "intermediate",
    "xpReward": 325,
    "estimatedTime": "30 min",
    "startingCode": "# Create a list called 'spells'\n# Each spell is a dictionary with 'name' and 'power'\n# Add: {'name': 'Fireball', 'power': 50}\n# Print the name of the first spell\n\n",
    "solutionCode": "spells = [{'name': 'Fireball', 'power': 50}]\nprint(spells[0]['name'])",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Fireball"
      }
    ],
    "concepts": ["lists", "dictionaries", "nested data structures"],
    "requiredLevel": 4
  },
  {
    "id": 13,
    "title": "‚ö° The Lightning Warrior",
    "description": "Create a Warrior class with name, health, and attack methods. Object-oriented programming begins!",
    "difficulty": "advanced",
    "xpReward": 400,
    "estimatedTime": "35 min",
    "startingCode": "# Create a Warrior class\n# Add __init__ method with name and health parameters\n# Add an attack method that prints an attack message\n# Create a warrior named 'Thor' with 100 health\n# Call the attack method\n\n",
    "solutionCode": "class Warrior:\n    def __init__(self, name, health):\n        self.name = name\n        self.health = health\n    \n    def attack(self):\n        print(f'{self.name} attacks with lightning!')\n\nthor = Warrior('Thor', 100)\nthor.attack()",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Thor attacks with lightning!"
      }
    ],
    "concepts": ["classes", "objects", "methods", "__init__"],
    "requiredLevel": 5
  },
  {
    "id": 14,
    "title": "üî• The Dragon's Recursion",
    "description": "A dragon challenges you to solve the factorial mystery using recursion. Very advanced magic!",
    "difficulty": "advanced",
    "xpReward": 450,
    "estimatedTime": "40 min",
    "startingCode": "# Create a recursive function to calculate factorial\n# factorial(n) = n * factorial(n-1)\n# Base case: factorial(0) = 1\n# Calculate factorial(4)\n\n",
    "solutionCode": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(4)\nprint(result)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "24"
      }
    ],
    "concepts": ["recursion", "functions", "base cases"],
    "requiredLevel": 6
  },
  {
    "id": 15,
    "title": "üéÆ The Mini Game Engine",
    "description": "Create a simple number guessing game. The ultimate test of your programming skills!",
    "difficulty": "advanced",
    "xpReward": 500,
    "estimatedTime": "45 min",
    "startingCode": "# Create a simple guessing game\n# Set a secret number (let's use 7)\n# Create a function that takes a guess and returns a message\n# If guess is correct, return 'You won!'\n# If guess is too high, return 'Too high!'\n# If guess is too low, return 'Too low!'\n# Test with guess = 7\n\n",
    "solutionCode": "def check_guess(guess, secret=7):\n    if guess == secret:\n        return 'You won!'\n    elif guess > secret:\n        return 'Too high!'\n    else:\n        return 'Too low!'\n\nresult = check_guess(7)\nprint(result)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "You won!"
      }
    ],
    "concepts": ["functions", "conditionals", "game logic"],
    "requiredLevel": 6
  },
  {
    "id": 16,
    "title": "üèÜ The Ultimate RPG Character",
    "description": "Create a complete RPG character system with inheritance. Master-level programming!",
    "difficulty": "advanced",
    "xpReward": 600,
    "estimatedTime": "50 min",
    "startingCode": "# Create a Character base class with name, health, level\n# Create a Mage class that inherits from Character\n# Add a cast_spell method to Mage\n# Create a mage named 'Gandalf' with 80 health and level 10\n# Call cast_spell method\n\n",
    "solutionCode": "class Character:\n    def __init__(self, name, health, level):\n        self.name = name\n        self.health = health\n        self.level = level\n\nclass Mage(Character):\n    def cast_spell(self):\n        print(f'{self.name} casts a powerful spell!')\n\ngandalf = Mage('Gandalf', 80, 10)\ngandalf.cast_spell()",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Gandalf casts a powerful spell!"
      }
    ],
    "concepts": ["classes", "inheritance", "object-oriented programming"],
    "requiredLevel": 7
  },
  {
    "id": 17,
    "title": "üéØ The Error Hunter",
    "description": "Learn to handle errors like a pro! Use try-except to catch and handle exceptions.",
    "difficulty": "advanced",
    "xpReward": 550,
    "estimatedTime": "35 min",
    "startingCode": "# Create a function that safely divides two numbers\n# Use try-except to handle division by zero\n# If division by zero occurs, return 'Cannot divide by zero!'\n# Test with divide_safely(10, 0)\n\n",
    "solutionCode": "def divide_safely(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return 'Cannot divide by zero!'\n\nresult = divide_safely(10, 0)\nprint(result)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Cannot divide by zero!"
      }
    ],
    "concepts": ["error handling", "try-except", "exceptions"],
    "requiredLevel": 7
  },
  {
    "id": 18,
    "title": "üóÇÔ∏è The Data Processor",
    "description": "Process a list of adventurer data using list comprehensions. Advanced Python magic!",
    "difficulty": "advanced",
    "xpReward": 575,
    "estimatedTime": "40 min",
    "startingCode": "# Given a list of adventurer levels: [1, 2, 3, 4, 5]\n# Use list comprehension to create a new list with levels multiplied by 10\n# Print the new list\n\nlevels = [1, 2, 3, 4, 5]\n# Your code here\n",
    "solutionCode": "levels = [1, 2, 3, 4, 5]\npower_levels = [level * 10 for level in levels]\nprint(power_levels)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "[10, 20, 30, 40, 50]"
      }
    ],
    "concepts": ["list comprehensions", "lists", "iteration"],
    "requiredLevel": 8
  },
  {
    "id": 19,
    "title": "üé™ The Decorator Master",
    "description": "Create a decorator to add magical effects to functions. This is expert-level wizardry!",
    "difficulty": "expert",
    "xpReward": 700,
    "estimatedTime": "60 min",
    "startingCode": "# Create a decorator called 'magical_effect'\n# It should print 'Magical effect activated!' before calling the function\n# Apply it to a function called 'cast_fireball'\n# cast_fireball should print 'Fireball launched!'\n\n",
    "solutionCode": "def magical_effect(func):\n    def wrapper():\n        print('Magical effect activated!')\n        return func()\n    return wrapper\n\n@magical_effect\ndef cast_fireball():\n    print('Fireball launched!')\n\ncast_fireball()",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Magical effect activated!\nFireball launched!"
      }
    ],
    "concepts": ["decorators", "functions", "advanced Python"],
    "requiredLevel": 9
  },
  {
    "id": 20,
    "title": "üåü The Grand Quest Master",
    "description": "Create a complete quest management system. This is the ultimate challenge!",
    "difficulty": "expert",
    "xpReward": 1000,
    "estimatedTime": "90 min",
    "startingCode": "# Create a QuestManager class\n# It should have methods: add_quest, complete_quest, get_active_quests\n# Create at least one quest and complete it\n# Print 'Quest system ready!'\n\n",
    "solutionCode": "class QuestManager:\n    def __init__(self):\n        self.quests = []\n        self.completed = []\n    \n    def add_quest(self, quest):\n        self.quests.append(quest)\n    \n    def complete_quest(self, quest):\n        if quest in self.quests:\n            self.quests.remove(quest)\n            self.completed.append(quest)\n    \n    def get_active_quests(self):\n        return self.quests\n\nqm = QuestManager()\nqm.add_quest('Defeat Dragon')\nqm.complete_quest('Defeat Dragon')\nprint('Quest system ready!')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Quest system ready!"
      }
    ],
    "concepts": ["classes", "methods", "data structures", "system design"],
    "requiredLevel": 10
  },
  {
    "id": 21,
    "title": "üéÆ Mini Game Creator",
    "description": "Build a simple number guessing game with user interaction and score tracking.",
    "difficulty": "intermediate",
    "xpReward": 400,
    "estimatedTime": "25 min",
    "startingCode": "# Create a number guessing game\n# Generate a random number between 1-10\n# Ask user to guess, give hints (too high/low)\n# Count attempts and celebrate when they win\n\nimport random\n\n",
    "solutionCode": "import random\n\nnumber = random.randint(1, 10)\nattempts = 0\nprint('Welcome to the Number Guessing Game!')\nprint('I have picked a number between 1 and 10')\n\nwhile True:\n    guess = int(input('Enter your guess: '))\n    attempts += 1\n    \n    if guess == number:\n        print(f'Congratulations! You won in {attempts} attempts!')\n        break\n    elif guess < number:\n        print('Too low! Try higher.')\n    else:\n        print('Too high! Try lower.')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Welcome to the Number Guessing Game!\nI have picked a number between 1 and 10"
      }
    ],
    "concepts": ["random", "loops", "user input", "conditionals", "game logic"],
    "requiredLevel": 4
  },
  {
    "id": 22,
    "title": "üìä Data Wizard",
    "description": "Analyze a list of student grades and generate statistics like average, highest, and lowest scores.",
    "difficulty": "intermediate",
    "xpReward": 350,
    "estimatedTime": "20 min",
    "startingCode": "# Analyze student grades\ngrades = [85, 92, 78, 96, 87, 73, 91, 89]\n\n# Calculate and print:\n# - Average grade\n# - Highest grade\n# - Lowest grade\n# - Number of students who passed (grade >= 80)\n\n",
    "solutionCode": "grades = [85, 92, 78, 96, 87, 73, 91, 89]\n\naverage = sum(grades) / len(grades)\nhighest = max(grades)\nlowest = min(grades)\npassed = len([grade for grade in grades if grade >= 80])\n\nprint(f'Average grade: {average:.1f}')\nprint(f'Highest grade: {highest}')\nprint(f'Lowest grade: {lowest}')\nprint(f'Students passed: {passed}')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Average grade: 86.4\nHighest grade: 96\nLowest grade: 73\nStudents passed: 6"
      }
    ],
    "concepts": ["lists", "functions", "statistics", "list comprehensions"],
    "requiredLevel": 3
  },
  {
    "id": 23,
    "title": "üîê Password Guardian",
    "description": "Create a password strength checker that validates security requirements.",
    "difficulty": "intermediate",
    "xpReward": 375,
    "estimatedTime": "30 min",
    "startingCode": "# Create a password strength checker\n# Requirements: at least 8 chars, 1 uppercase, 1 lowercase, 1 digit\n# Return 'Strong', 'Medium', or 'Weak'\n\ndef check_password_strength(password):\n    # Your code here\n    pass\n\n# Test with these passwords\npasswords = ['hello', 'Hello123', 'HELLO123', 'HelloWorld123']\nfor pwd in passwords:\n    print(f'{pwd}: {check_password_strength(pwd)}')",
    "solutionCode": "def check_password_strength(password):\n    if len(password) < 8:\n        return 'Weak'\n    \n    has_upper = any(c.isupper() for c in password)\n    has_lower = any(c.islower() for c in password)\n    has_digit = any(c.isdigit() for c in password)\n    \n    if has_upper and has_lower and has_digit:\n        return 'Strong'\n    elif (has_upper and has_lower) or (has_upper and has_digit) or (has_lower and has_digit):\n        return 'Medium'\n    else:\n        return 'Weak'\n\npasswords = ['hello', 'Hello123', 'HELLO123', 'HelloWorld123']\nfor pwd in passwords:\n    print(f'{pwd}: {check_password_strength(pwd)}')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "hello: Weak\nHello123: Strong\nHELLO123: Medium\nHelloWorld123: Strong"
      }
    ],
    "concepts": ["functions", "string methods", "boolean logic", "security"],
    "requiredLevel": 4
  },
  {
    "id": 24,
    "title": "üåü Star Pattern Artist",
    "description": "Create beautiful ASCII art patterns using nested loops. Master the art of pattern programming!",
    "difficulty": "beginner",
    "xpReward": 200,
    "estimatedTime": "15 min",
    "startingCode": "# Create a star pyramid pattern\n# Print 5 rows where row i has i stars\n# Example output:\n# *\n# **\n# ***\n# ****\n# *****\n\n",
    "solutionCode": "for i in range(1, 6):\n    print('*' * i)",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "*\n**\n***\n****\n*****"
      }
    ],
    "concepts": ["loops", "string multiplication", "patterns"],
    "requiredLevel": 2
  },
  {
    "id": 25,
    "title": "üîÑ Palindrome Detective",
    "description": "Detect if words are palindromes (read the same forwards and backwards).",
    "difficulty": "beginner",
    "xpReward": 175,
    "estimatedTime": "12 min",
    "startingCode": "# Check if these words are palindromes\nwords = ['racecar', 'hello', 'level', 'python', 'madam']\n\n# For each word, print 'word: Yes' or 'word: No'\n\n",
    "solutionCode": "words = ['racecar', 'hello', 'level', 'python', 'madam']\n\nfor word in words:\n    if word == word[::-1]:\n        print(f'{word}: Yes')\n    else:\n        print(f'{word}: No')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "racecar: Yes\nhello: No\nlevel: Yes\npython: No\nmadam: Yes"
      }
    ],
    "concepts": ["strings", "slicing", "conditionals"],
    "requiredLevel": 2
  },
  {
    "id": 26,
    "title": "üéØ The Target Practice",
    "description": "Practice your aim with input and output! Create an interactive target practice game.",
    "difficulty": "beginner",
    "xpReward": 175,
    "estimatedTime": "12 min",
    "startingCode": "# Create a target practice game\n# Ask the user for their name\n# Ask how many arrows they want to shoot\n# Use a loop to simulate shooting arrows\n\n",
    "solutionCode": "name = input('What is your name, archer? ')\narrows = int(input('How many arrows do you want to shoot? '))\n\nfor i in range(1, arrows + 1):\n    print(f'{name} shoots arrow {i}!')\n\nprint('Great shooting!')",
    "testCases": [
      {
        "input": "Robin\n3",
        "expectedOutput": "What is your name, archer? How many arrows do you want to shoot? Robin shoots arrow 1!\nRobin shoots arrow 2!\nRobin shoots arrow 3!\nGreat shooting!"
      }
    ],
    "concepts": ["input", "type conversion", "user interaction", "for loops", "string interpolation"],
    "requiredLevel": 2
  },
  {
    "id": 27,
    "title": "üóùÔ∏è The Secret Keeper",
    "description": "Use dictionaries to store secret information about your character!",
    "difficulty": "intermediate",
    "xpReward": 250,
    "estimatedTime": "18 min",
    "startingCode": "# Create a dictionary with your character's stats\n# Include: name, class, level, health, mana\n# Print each stat in a readable format\n\n",
    "solutionCode": "character = {\n    'name': 'Hero',\n    'class': 'Warrior',\n    'level': 5,\n    'health': 100,\n    'mana': 50\n}\n\nfor key, value in character.items():\n    print(f'{key}: {value}')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "name: Hero\nclass: Warrior\nlevel: 5\nhealth: 100\nmana: 50"
      }
    ],
    "concepts": ["dictionaries", "key-value pairs", "dictionary creation", "dictionary iteration", "items method"],
    "requiredLevel": 3
  },
  {
    "id": 28,
    "title": "üé≤ The Dice Master",
    "description": "Create a function to roll dice and calculate your luck!",
    "difficulty": "intermediate",
    "xpReward": 300,
    "estimatedTime": "20 min",
    "startingCode": "# Create a function called roll_dice that takes number of sides\n# Import random module\n# Return a random number between 1 and the number of sides\n# Roll a 6-sided dice 3 times and print results\n\n",
    "solutionCode": "import random\n\ndef roll_dice(sides):\n    return random.randint(1, sides)\n\nfor i in range(3):\n    result = roll_dice(6)\n    print(f'Roll {i+1}: {result}')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Roll 1: 3\nRoll 2: 6\nRoll 3: 2"
      }
    ],
    "concepts": ["functions", "parameters", "return values", "random module", "imports", "function calls"],
    "requiredLevel": 3
  },
  {
    "id": 29,
    "title": "üè∞ The Castle Builder",
    "description": "Build a castle using nested loops to create patterns!",
    "difficulty": "intermediate",
    "xpReward": 350,
    "estimatedTime": "25 min",
    "startingCode": "# Build a castle wall using nested loops\n# Create a 5x5 pattern using '#' characters\n# Each row should have 5 '#' characters\n\n",
    "solutionCode": "for row in range(5):\n    for col in range(5):\n        print('#', end=' ')\n    print()  # New line after each row",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "# # # # # \n# # # # # \n# # # # # \n# # # # # \n# # # # # "
      }
    ],
    "concepts": ["nested loops", "print formatting", "patterns", "end parameter", "loop control"],
    "requiredLevel": 4
  },
  {
    "id": 30,
    "title": "üßô‚Äç‚ôÇÔ∏è The Wise Wizard",
    "description": "Create a wizard class with magical abilities!",
    "difficulty": "intermediate",
    "xpReward": 400,
    "estimatedTime": "30 min",
    "startingCode": "# Create a Wizard class\n# Add __init__ method with name and mana\n# Add cast_spell method that reduces mana by 10\n# Create a wizard and cast 3 spells\n\n",
    "solutionCode": "class Wizard:\n    def __init__(self, name, mana):\n        self.name = name\n        self.mana = mana\n    \n    def cast_spell(self, spell_name):\n        if self.mana >= 10:\n            self.mana -= 10\n            print(f'{self.name} casts {spell_name}! Mana: {self.mana}')\n        else:\n            print(f'{self.name} is out of mana!')\n\nwizard = Wizard('Gandalf', 50)\nwizard.cast_spell('Fireball')\nwizard.cast_spell('Lightning')\nwizard.cast_spell('Heal')",
    "testCases": [
      {
        "input": "",
        "expectedOutput": "Gandalf casts Fireball! Mana: 40\nGandalf casts Lightning! Mana: 30\nGandalf casts Heal! Mana: 20"
      }
    ],
    "concepts": ["classes", "objects", "__init__", "methods", "self", "object-oriented programming"],
    "requiredLevel": 5
  }
]